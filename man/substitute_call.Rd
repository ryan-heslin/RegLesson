% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operations.R
\name{substitute_call}
\alias{substitute_call}
\title{Substitute Values from an Environment into a Call}
\usage{
substitute_call(sub_call, envir, more_subs = list(), depth = 1, quote = TRUE)
}
\arguments{
\item{sub_call}{R expression, quoted if \code{quote = FALSE}, unquoted otherwise. May also be a symbol or constant.}

\item{envir}{An environment from which to substitute values.}

\item{more_subs}{Optional named list of additional values to substitute. If any names are shared with \code{envir}, those in \code{more_subs} take precedence.}

\item{depth}{Used internally to track recursion depth. Do not specify this argument.}

\item{quote}{Logical. Should the call be quoted (i.e., it is passed as an unevaluated expression?).}
}
\value{
Call object with all matched names substituted with corresponding names.
}
\description{
Substitute Values from an Environment into a Call
}
\details{
This function recursively traverses an R call object (a list-like representation of the abstract syntax tree) and replaces names with corresponding values in \code{envir}. Mandatory non-default arguments to any function in the call are substituted the same way, even if omitted; thus, this function can
convert semantically invalid calls into valid ones. The modified call may still be invalid, however, if some mandatory arguments are unspecified and neither \code{envir} or \eqn{more_subs} contains substitutions for them.

This function is meant to be used with calls to functions from this package, using a \code{\link{LinRegProblem}} instance as \code{envir}. Because most function arguments are also attributes of \code{LinRegProblem} objects, doing so will automatically yield a valid call.
}
